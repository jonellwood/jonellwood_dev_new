{"ast":null,"code":"import client, { previewClient } from './sanity';\n\nconst getUniquePosts = posts => {\n  const slugs = new Set();\n  return posts.filter(post => {\n    if (slugs.has(post.slug)) {\n      return false;\n    } else {\n      slugs.add(post.slug);\n      return true;\n    }\n  });\n};\n\nconst postFields = `\n  name,\n  title,\n  date,\n  excerpt,\n  'slug': slug.current,\n  'coverImage': coverImage.asset->url,\n  'author': author->{name, 'picture': picture.asset->url},\n`;\n\nconst getClient = preview => preview ? previewClient : client;\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await getClient(true).fetch(`*[_type == \"post\" && slug.current == $slug] | order(date desc){\n      ${postFields}\n      content\n    }`, {\n    slug\n  });\n  return data[0];\n}\nexport async function getAllPostsWithSlug() {\n  const data = await client.fetch(`*[_type == \"post\"]{ 'slug': slug.current }`);\n  return data;\n}\nexport async function getAllPostsForHome(preview) {\n  const results = await getClient(preview).fetch(`*[_type == \"post\"] | order(date desc, _updatedAt desc){\n      ${postFields}\n    }`);\n  return getUniquePosts(results);\n}\nexport async function getPostAndMorePosts(slug, preview) {\n  const curClient = getClient(preview);\n  const [post, morePosts] = await Promise.all([curClient.fetch(`*[_type == \"post\" && slug.current == $slug] | order(_updatedAt desc) {\n        ${postFields}\n        content,\n      }`, {\n    slug\n  }).then(res => res === null || res === void 0 ? void 0 : res[0]), curClient.fetch(`*[_type == \"post\" && slug.current != $slug] | order(date desc, _updatedAt desc){\n        ${postFields}\n        content,\n      }[0...2]`, {\n    slug\n  })]);\n  return {\n    post,\n    morePosts: getUniquePosts(morePosts)\n  };\n}","map":{"version":3,"sources":["/Users/jonathanellwood/Documents/GitHub/jonellwood_dev_new/lib/api.js"],"names":["client","previewClient","getUniquePosts","posts","slugs","Set","filter","post","has","slug","add","postFields","getClient","preview","getPreviewPostBySlug","data","fetch","getAllPostsWithSlug","getAllPostsForHome","results","getPostAndMorePosts","curClient","morePosts","Promise","all","then","res"],"mappings":"AAAA,OAAOA,MAAP,IAAiBC,aAAjB,QAAsC,UAAtC;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,SAAOF,KAAK,CAACG,MAAN,CAAcC,IAAD,IAAU;AAC5B,QAAIH,KAAK,CAACI,GAAN,CAAUD,IAAI,CAACE,IAAf,CAAJ,EAA0B;AACxB,aAAO,KAAP;AACD,KAFD,MAEO;AACLL,MAAAA,KAAK,CAACM,GAAN,CAAUH,IAAI,CAACE,IAAf;AACA,aAAO,IAAP;AACD;AACF,GAPM,CAAP;AAQD,CAVD;;AAYA,MAAME,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,MAAMC,SAAS,GAAIC,OAAD,IAAcA,OAAO,GAAGZ,aAAH,GAAmBD,MAA1D;;AAEA,OAAO,eAAec,oBAAf,CAAoCL,IAApC,EAA0C;AAC/C,QAAMM,IAAI,GAAG,MAAMH,SAAS,CAAC,IAAD,CAAT,CAAgBI,KAAhB,CAChB;AACL,QAAQL,UAAW;AACnB;AACA,MAJqB,EAKjB;AAAEF,IAAAA;AAAF,GALiB,CAAnB;AAOA,SAAOM,IAAI,CAAC,CAAD,CAAX;AACD;AAED,OAAO,eAAeE,mBAAf,GAAqC;AAC1C,QAAMF,IAAI,GAAG,MAAMf,MAAM,CAACgB,KAAP,CAAc,4CAAd,CAAnB;AACA,SAAOD,IAAP;AACD;AAED,OAAO,eAAeG,kBAAf,CAAkCL,OAAlC,EAA2C;AAChD,QAAMM,OAAO,GAAG,MAAMP,SAAS,CAACC,OAAD,CAAT,CACnBG,KADmB,CACZ;AACZ,QAAQL,UAAW;AACnB,MAHwB,CAAtB;AAIA,SAAOT,cAAc,CAACiB,OAAD,CAArB;AACD;AAED,OAAO,eAAeC,mBAAf,CAAmCX,IAAnC,EAAyCI,OAAzC,EAAkD;AACvD,QAAMQ,SAAS,GAAGT,SAAS,CAACC,OAAD,CAA3B;AACA,QAAM,CAACN,IAAD,EAAOe,SAAP,IAAoB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC1CH,SAAS,CACNL,KADH,CAEK;AACT,UAAUL,UAAW;AACrB;AACA,QALI,EAMI;AAAEF,IAAAA;AAAF,GANJ,EAQGgB,IARH,CAQSC,GAAD,IAASA,GAAT,aAASA,GAAT,uBAASA,GAAG,CAAG,CAAH,CARpB,CAD0C,EAU1CL,SAAS,CAACL,KAAV,CACG;AACP,UAAUL,UAAW;AACrB;AACA,eAJI,EAKE;AAAEF,IAAAA;AAAF,GALF,CAV0C,CAAZ,CAAhC;AAkBA,SAAO;AAAEF,IAAAA,IAAF;AAAQe,IAAAA,SAAS,EAAEpB,cAAc,CAACoB,SAAD;AAAjC,GAAP;AACD","sourcesContent":["import client, { previewClient } from './sanity'\n\nconst getUniquePosts = (posts) => {\n  const slugs = new Set()\n  return posts.filter((post) => {\n    if (slugs.has(post.slug)) {\n      return false\n    } else {\n      slugs.add(post.slug)\n      return true\n    }\n  })\n}\n\nconst postFields = `\n  name,\n  title,\n  date,\n  excerpt,\n  'slug': slug.current,\n  'coverImage': coverImage.asset->url,\n  'author': author->{name, 'picture': picture.asset->url},\n`\n\nconst getClient = (preview) => (preview ? previewClient : client)\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await getClient(true).fetch(\n    `*[_type == \"post\" && slug.current == $slug] | order(date desc){\n      ${postFields}\n      content\n    }`,\n    { slug }\n  )\n  return data[0]\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await client.fetch(`*[_type == \"post\"]{ 'slug': slug.current }`)\n  return data\n}\n\nexport async function getAllPostsForHome(preview) {\n  const results = await getClient(preview)\n    .fetch(`*[_type == \"post\"] | order(date desc, _updatedAt desc){\n      ${postFields}\n    }`)\n  return getUniquePosts(results)\n}\n\nexport async function getPostAndMorePosts(slug, preview) {\n  const curClient = getClient(preview)\n  const [post, morePosts] = await Promise.all([\n    curClient\n      .fetch(\n        `*[_type == \"post\" && slug.current == $slug] | order(_updatedAt desc) {\n        ${postFields}\n        content,\n      }`,\n        { slug }\n      )\n      .then((res) => res?.[0]),\n    curClient.fetch(\n      `*[_type == \"post\" && slug.current != $slug] | order(date desc, _updatedAt desc){\n        ${postFields}\n        content,\n      }[0...2]`,\n      { slug }\n    ),\n  ])\n  return { post, morePosts: getUniquePosts(morePosts) }\n}\n"]},"metadata":{},"sourceType":"module"}