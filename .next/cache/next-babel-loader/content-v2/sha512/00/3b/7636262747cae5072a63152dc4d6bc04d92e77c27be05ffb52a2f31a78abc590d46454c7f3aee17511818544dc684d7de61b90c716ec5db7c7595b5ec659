{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport sanityClient from '@sanity/client';\nimport sanityImage from '@sanity/image-url';\nvar options = {\n  // Find your project ID and dataset in `sanity.json` in your studio project\n  dataset: 'production',\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  useCdn: false // useCdn == true gives fast, cheap responses using a globally distributed cache.\n  // Set this to false if your application require the freshest possible\n  // data always (potentially slightly slower and a bit more expensive).\n\n};\nvar client = sanityClient(options);\nexport var imageBuilder = sanityImage(client);\nexport var previewClient = sanityClient(_objectSpread(_objectSpread({}, options), {}, {\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN\n}));\nexport default client;","map":{"version":3,"sources":["/Users/jonathanellwood/Documents/GitHub/jonellwood_dev_new/lib/sanity.js"],"names":["sanityClient","sanityImage","options","dataset","projectId","process","env","NEXT_PUBLIC_SANITY_PROJECT_ID","useCdn","client","imageBuilder","previewClient","token","SANITY_API_TOKEN"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,IAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,OAAO,EAAE,YAFK;AAGdC,EAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,6BAHT;AAIdC,EAAAA,MAAM,OAJQ,CAKd;AACA;AACA;;AAPc,CAAhB;AAUA,IAAMC,MAAM,GAAGT,YAAY,CAACE,OAAD,CAA3B;AAEA,OAAO,IAAMQ,YAAY,GAAGT,WAAW,CAACQ,MAAD,CAAhC;AAEP,OAAO,IAAME,aAAa,GAAGX,YAAY,iCACpCE,OADoC;AAEvCM,EAAAA,MAAM,EAAE,KAF+B;AAGvCI,EAAAA,KAAK,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAHoB,GAAlC;AAMP,eAAeJ,MAAf","sourcesContent":["import sanityClient from '@sanity/client'\nimport sanityImage from '@sanity/image-url'\n\nconst options = {\n  // Find your project ID and dataset in `sanity.json` in your studio project\n  dataset: 'production',\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  useCdn: process.env.NODE_ENV === 'production',\n  // useCdn == true gives fast, cheap responses using a globally distributed cache.\n  // Set this to false if your application require the freshest possible\n  // data always (potentially slightly slower and a bit more expensive).\n}\n\nconst client = sanityClient(options)\n\nexport const imageBuilder = sanityImage(client)\n\nexport const previewClient = sanityClient({\n  ...options,\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN,\n})\n\nexport default client\n"]},"metadata":{},"sourceType":"module"}